issue (사용자가 문제들을 해결하기 위한 작업 단위)
- 누가 이 작업 할 건지 정하는 것
- 프로젝트에서 해결해야 하는 문제이다.
- github 외에도 많이 쓰는 이슈 관리를 할 수 있는 도구는 Jira, Trello, YouTrack 등이 있다.

* 이슈 등록할때!
- Assignees (누가 할건지 등록하는 것)
- Labels (등록하는 이슈가 어떤 분류인지 달아주는 것)
- Labels 밑에 있는 기능들을 더 추가하고 하는것은 해당 프로젝트에 관련 되있는걸 추가할때 사용하면 된다.
- 이슈 등록시 프로젝트명 예시) project #1 (#숫자 +1)
- project명 옆에 생긴 이슈들을 커밋 메세지에도 나타내줄 수 있다
- 이슈를 설정하고 닫아줄땐 close issue 를 사용하고,
  close issue를 클릭하고 다시 issue 칸으로 가서 확인했을땐 바로 보이지 않는다.
  Closed를 눌러서 확인했을때 이슈가 해결됐거나, 더이상 필요하지 않거나 하면 닫아주는 것
  본인이 필요하다면 하단에 Reopen issue를 누르고 다시 열어서 작업을 이어나가면 된다.
- 깃에서는 사용자가 커밋 메세지 옆에 #숫자를 붙여주게 되면 
  사용자가 올린것이 깃에 있는것과 연관이 되어있는걸 알 수 있다.

branch (나뭇가지를 연상하면 된다!)
- 각자 맡은 것을 작업하는 것
- 나의 작업 공간을 브랜치라고 한다.
- 기능 단위별로 작업 공간을 분리하고 싶을때 브랜치를 사용한다.
- 기능, 목적에 맞게 나누어 작업하는 것!
- 작업 목적에 따라 ㅇㅇㅇ branch, ㅁㅁㅁ branch 를 만들어서 관련된 작업만 하고, 
  나중에 하나로 합치면(merge) 된다!
- 따로 작업공간을 확보하기 위해서 브랜치를 보통 많이 활용을 한다.
- 브랜치 생성하는 방법은 소스트리 -> History -> 제일 상단에 있는 작업에 커서를 두고 
  마우스 우클릭 -> 브랜치 선택! -> 브랜치 이름은 xxx/2(커밋번호)_xxxx이름을 나타내줄 것
  -> 브랜치 생성 클릭
- 위와 같이 브랜치 생성했을때 소스트리 브랜치 부분을 보면 브랜치 이름에 적었던 
   xxx 부분이 브랜치 폴더명으로 오고, 뒤에 적은 2_xxxx 부분이 브랜치 명이 되는것을 알 수 있다.
- 소스트리에서 브랜치 부분을 보면 main이나 내가 생성한 브랜치 명 옆에 ㅇ 로 표시 되어있는걸 볼 수 있다.
  그 표시를 체크아웃이라고 한다.

* 브랜치 삭제
- 브랜치를 삭제한다는 것은 그동안에 브랜치에서 했던 모든 작업내역, 커밋들이 전부 사라진다는 내용
- 사용자가 수정했던 내용들도 다 사라지지만 수정하기전에 있던 내용으로 바뀐다!

* 트래킹
트래킹을 한다는건 branch를 한다는 것이다.
로컬 repo와 원격의 특정 브랜치를 연결해 주는 것

merge (병합)
- 각자 작업을 프로젝트에 합치는 것
- 정확히는 브랜치에 커밋들을 머지하는 것
- 하나의 브랜치의 작업 내역을 다른 브랜치에 합치는 것!
- A와 B브랜치로 나뉘어 작업한것을 하나로 만드는 것!

* merge 할때 클릭해야하는 옵션 3가지
1.  즉시 커밋 병합 (충돌이 없을 시)
2. 병합 커밋에 있는 메세지들을 첨부하세요.
3. fast-forward가 가능해도 새 커밋으로 생성

Merge conflict (충돌이 난 상황, 잘 동작 되지않는 상황에 대한 대처법)
Merge conflict란?
하나의 브랜치에 커밋들을 반영하려고 할 때, 하나의 파일에 내용이 양쪽에서 수정하고
합치려고 할때 깃에서 양쪽에서 수정됐는데 어떤 내용을 반영해야돼?
 라고 하는것이 Merge conflict이다.

-만약 A와 B 브랜치에서 수정한 내용이 충돌이 일어났을땐 소스트리에 파일상태로 들어가서 
  ! 표시가 되있는 파일을 열어보면 
<<<<<<<<HEAD
=========
>>>>>>>>feature/jjigae.txt
(↑예시임)

위처럼 txt파일안에 나와있을수 있다. 그때 본인이 최종적으로 반영 할 내용 수정 후 저장하고,
커밋 메세지칸에 컴플릭트 메세지가 나와있고, 그 상태로 커밋을 한다면 충돌이 난 상황을 해결 할 수 있다.
